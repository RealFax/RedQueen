syntax = "proto3";

package serverpb;

option go_package = "./;serverpb";


// --------------- Public --------------- //

message ResponseHeader {
  // cluster_id is the ID of the cluster which sent the response.
  string cluster_id = 1;

  // reserve field
  uint64 revision = 2;

  // raft_term is the raft term when the request was applied.
  uint64 raft_term = 3;
}

// --------------- KV store --------------- //

message SetRequest {
  // key is the key, in bytes, to set into the key-value store.
  bytes key = 1;

  // value is the value, in bytes, to associate with the key in the key-value store.
  bytes value = 2;

  // ttl indicates the ttl time of this key-value store.
  // 0 means never ttl, the unit is second.
  uint32 ttl = 3;

  bool ignore_value = 4;

  bool ignore_ttl = 5;

  // namespace means the same key-value store can exist in different namespaces
  optional string namespace = 6;
}

message SetResponse {
  ResponseHeader header = 1;
}

message GetRequest {
  // key is the key, in bytes, to set into the key-value store.
  bytes key = 1;
  // namespace means the same key-value store can exist in different namespaces
  optional string namespace = 2;
}

message GetResponse {
  ResponseHeader header = 1;
  bytes value = 2;
  uint32 ttl = 3;
}

message PrefixScanRequest {
  bytes prefix = 1;
  uint64 offset = 2;
  uint64 limit = 3;
  optional string reg = 4;
  optional string namespace = 5;
}

message PrefixScanResponse {
  message PrefixScanResult {
    bytes key = 1;
    bytes value = 2;
    uint64 timestamp = 3;
    uint32 ttl = 4;
  }
  ResponseHeader header = 1;
  repeated PrefixScanResult result = 2;
}

message DeleteRequest {
  // key is the key, in bytes, to delete into the key-value store.
  bytes key = 1;

  // namespace means the same key-value store can exist in different namespaces
  optional string namespace = 2;
}

message DeleteResponse {
  ResponseHeader header = 1;
}

message WatchRequest {
  // key is the key, in bytes, to delete into the key-value store.
  bytes key = 1;
  // ignore_errors caused by problems such as key-value being deleted or not existing
  bool ignore_errors = 2;
  // namespace means the same key-value store can exist in different namespaces
  optional string namespace = 3;
  // buf_size, declare the buffer size of watch
  optional uint32 buf_size = 4;
}

message WatchPrefixRequest {
  // prefix is the prefix, keys prefix
  bytes prefix = 1;
  // namespace means the same key-value store can exist in different namespaces
  optional string namespace = 3;
  // buf_size, declare the buffer size of watch
  optional uint32 buf_size = 4;
}

message WatchResponse {
  ResponseHeader header = 1;
  // update_seq is the updated serial number (current session)
  uint64 update_seq = 2;
  // timestamp is the when this value was updated
  int64 timestamp = 3;
  uint32 ttl = 4;
  bytes key = 5;
  bytes value = 6;
}

service KV {
  rpc Set(SetRequest) returns (SetResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc PrefixScan(PrefixScanRequest) returns (PrefixScanResponse) {}
  rpc TrySet(SetRequest) returns (SetResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}
  rpc WatchPrefix(WatchPrefixRequest) returns (stream WatchResponse) {}
}

// --------------- Locker --------------- //

message LockRequest {
  string lock_id = 1;
  // ttl indicates the ttl time of this key-value store.
  // -1 means never ttl, the unit is second.
  int32 ttl = 2;
}

message LockResponse {
  ResponseHeader header = 1;
}

message UnlockRequest {
  string lock_id = 1;
}

message UnlockResponse {
  ResponseHeader header = 1;
}

message TryLockRequest {
  string lock_id = 1;
  // ttl indicates the ttl time of this key-value store.
  // -1 means never ttl, the unit is second.
  int32 ttl = 2;
  // deadline to TryLock
  int64 deadline = 3;
}

message TryLockResponse {
  ResponseHeader header = 1;
}

service Locker {
  rpc Lock(LockRequest) returns (LockResponse) {}
  rpc Unlock(UnlockRequest) returns (UnlockResponse) {}
  rpc TryLock(TryLockRequest) returns (TryLockResponse) {}
}
