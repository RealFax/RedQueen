// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: rpc.proto

package serverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KVClient is the client API for KV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	TrySet(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (KV_WatchClient, error)
}

type kVClient struct {
	cc grpc.ClientConnInterface
}

func NewKVClient(cc grpc.ClientConnInterface) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) TrySet(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/TrySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/serverpb.KV/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (KV_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &KV_ServiceDesc.Streams[0], "/serverpb.KV/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &kVWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KV_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type kVWatchClient struct {
	grpc.ClientStream
}

func (x *kVWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KVServer is the server API for KV service.
// All implementations must embed UnimplementedKVServer
// for forward compatibility
type KVServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	TrySet(context.Context, *SetRequest) (*SetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Watch(*WatchRequest, KV_WatchServer) error
	mustEmbedUnimplementedKVServer()
}

// UnimplementedKVServer must be embedded to have forward compatible implementations.
type UnimplementedKVServer struct {
}

func (UnimplementedKVServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKVServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVServer) TrySet(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrySet not implemented")
}
func (UnimplementedKVServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKVServer) Watch(*WatchRequest, KV_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedKVServer) mustEmbedUnimplementedKVServer() {}

// UnsafeKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServer will
// result in compilation errors.
type UnsafeKVServer interface {
	mustEmbedUnimplementedKVServer()
}

func RegisterKVServer(s grpc.ServiceRegistrar, srv KVServer) {
	s.RegisterService(&KV_ServiceDesc, srv)
}

func _KV_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_TrySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).TrySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/TrySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).TrySet(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.KV/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVServer).Watch(m, &kVWatchServer{stream})
}

type KV_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type kVWatchServer struct {
	grpc.ServerStream
}

func (x *kVWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KV_ServiceDesc is the grpc.ServiceDesc for KV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _KV_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KV_Get_Handler,
		},
		{
			MethodName: "TrySet",
			Handler:    _KV_TrySet_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KV_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _KV_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// LockerClient is the client API for Locker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockerClient interface {
	New(ctx context.Context, in *NewMutexRequest, opts ...grpc.CallOption) (*NewMutexResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	TryLock(ctx context.Context, in *TryLockRequest, opts ...grpc.CallOption) (*TryLockResponse, error)
}

type lockerClient struct {
	cc grpc.ClientConnInterface
}

func NewLockerClient(cc grpc.ClientConnInterface) LockerClient {
	return &lockerClient{cc}
}

func (c *lockerClient) New(ctx context.Context, in *NewMutexRequest, opts ...grpc.CallOption) (*NewMutexResponse, error) {
	out := new(NewMutexResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Locker/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Locker/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Locker/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) TryLock(ctx context.Context, in *TryLockRequest, opts ...grpc.CallOption) (*TryLockResponse, error) {
	out := new(TryLockResponse)
	err := c.cc.Invoke(ctx, "/serverpb.Locker/TryLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockerServer is the server API for Locker service.
// All implementations must embed UnimplementedLockerServer
// for forward compatibility
type LockerServer interface {
	New(context.Context, *NewMutexRequest) (*NewMutexResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	TryLock(context.Context, *TryLockRequest) (*TryLockResponse, error)
	mustEmbedUnimplementedLockerServer()
}

// UnimplementedLockerServer must be embedded to have forward compatible implementations.
type UnimplementedLockerServer struct {
}

func (UnimplementedLockerServer) New(context.Context, *NewMutexRequest) (*NewMutexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedLockerServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedLockerServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedLockerServer) TryLock(context.Context, *TryLockRequest) (*TryLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryLock not implemented")
}
func (UnimplementedLockerServer) mustEmbedUnimplementedLockerServer() {}

// UnsafeLockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockerServer will
// result in compilation errors.
type UnsafeLockerServer interface {
	mustEmbedUnimplementedLockerServer()
}

func RegisterLockerServer(s grpc.ServiceRegistrar, srv LockerServer) {
	s.RegisterService(&Locker_ServiceDesc, srv)
}

func _Locker_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMutexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Locker/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).New(ctx, req.(*NewMutexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Locker/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Locker/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_TryLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).TryLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Locker/TryLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).TryLock(ctx, req.(*TryLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Locker_ServiceDesc is the grpc.ServiceDesc for Locker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Locker",
	HandlerType: (*LockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Locker_New_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Locker_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Locker_Unlock_Handler,
		},
		{
			MethodName: "TryLock",
			Handler:    _Locker_TryLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// ServiceBridgeClient is the client API for ServiceBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceBridgeClient interface {
	Register(ctx context.Context, in *RegistryServiceRequest, opts ...grpc.CallOption) (*RegistryServiceResponse, error)
	Destroy(ctx context.Context, in *DestroyServiceRequest, opts ...grpc.CallOption) (*DestroyServiceResponse, error)
	Query(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error)
	Connect(ctx context.Context, in *ConnectServiceRequest, opts ...grpc.CallOption) (*ConnectServiceResponse, error)
	Pipeline(ctx context.Context, opts ...grpc.CallOption) (ServiceBridge_PipelineClient, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (ServiceBridge_HealthCheckClient, error)
}

type serviceBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBridgeClient(cc grpc.ClientConnInterface) ServiceBridgeClient {
	return &serviceBridgeClient{cc}
}

func (c *serviceBridgeClient) Register(ctx context.Context, in *RegistryServiceRequest, opts ...grpc.CallOption) (*RegistryServiceResponse, error) {
	out := new(RegistryServiceResponse)
	err := c.cc.Invoke(ctx, "/serverpb.ServiceBridge/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBridgeClient) Destroy(ctx context.Context, in *DestroyServiceRequest, opts ...grpc.CallOption) (*DestroyServiceResponse, error) {
	out := new(DestroyServiceResponse)
	err := c.cc.Invoke(ctx, "/serverpb.ServiceBridge/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBridgeClient) Query(ctx context.Context, in *QueryServiceRequest, opts ...grpc.CallOption) (*QueryServiceResponse, error) {
	out := new(QueryServiceResponse)
	err := c.cc.Invoke(ctx, "/serverpb.ServiceBridge/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBridgeClient) Connect(ctx context.Context, in *ConnectServiceRequest, opts ...grpc.CallOption) (*ConnectServiceResponse, error) {
	out := new(ConnectServiceResponse)
	err := c.cc.Invoke(ctx, "/serverpb.ServiceBridge/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceBridgeClient) Pipeline(ctx context.Context, opts ...grpc.CallOption) (ServiceBridge_PipelineClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceBridge_ServiceDesc.Streams[0], "/serverpb.ServiceBridge/Pipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceBridgePipelineClient{stream}
	return x, nil
}

type ServiceBridge_PipelineClient interface {
	Send(*PipelineServiceRequest) error
	Recv() (*PipelineServiceResponse, error)
	grpc.ClientStream
}

type serviceBridgePipelineClient struct {
	grpc.ClientStream
}

func (x *serviceBridgePipelineClient) Send(m *PipelineServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceBridgePipelineClient) Recv() (*PipelineServiceResponse, error) {
	m := new(PipelineServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceBridgeClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (ServiceBridge_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceBridge_ServiceDesc.Streams[1], "/serverpb.ServiceBridge/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceBridgeHealthCheckClient{stream}
	return x, nil
}

type ServiceBridge_HealthCheckClient interface {
	Send(*HealthCheckServiceRequest) error
	Recv() (*HealthCheckServiceResponse, error)
	grpc.ClientStream
}

type serviceBridgeHealthCheckClient struct {
	grpc.ClientStream
}

func (x *serviceBridgeHealthCheckClient) Send(m *HealthCheckServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceBridgeHealthCheckClient) Recv() (*HealthCheckServiceResponse, error) {
	m := new(HealthCheckServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceBridgeServer is the server API for ServiceBridge service.
// All implementations must embed UnimplementedServiceBridgeServer
// for forward compatibility
type ServiceBridgeServer interface {
	Register(context.Context, *RegistryServiceRequest) (*RegistryServiceResponse, error)
	Destroy(context.Context, *DestroyServiceRequest) (*DestroyServiceResponse, error)
	Query(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error)
	Connect(context.Context, *ConnectServiceRequest) (*ConnectServiceResponse, error)
	Pipeline(ServiceBridge_PipelineServer) error
	HealthCheck(ServiceBridge_HealthCheckServer) error
	mustEmbedUnimplementedServiceBridgeServer()
}

// UnimplementedServiceBridgeServer must be embedded to have forward compatible implementations.
type UnimplementedServiceBridgeServer struct {
}

func (UnimplementedServiceBridgeServer) Register(context.Context, *RegistryServiceRequest) (*RegistryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServiceBridgeServer) Destroy(context.Context, *DestroyServiceRequest) (*DestroyServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedServiceBridgeServer) Query(context.Context, *QueryServiceRequest) (*QueryServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedServiceBridgeServer) Connect(context.Context, *ConnectServiceRequest) (*ConnectServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedServiceBridgeServer) Pipeline(ServiceBridge_PipelineServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipeline not implemented")
}
func (UnimplementedServiceBridgeServer) HealthCheck(ServiceBridge_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedServiceBridgeServer) mustEmbedUnimplementedServiceBridgeServer() {}

// UnsafeServiceBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBridgeServer will
// result in compilation errors.
type UnsafeServiceBridgeServer interface {
	mustEmbedUnimplementedServiceBridgeServer()
}

func RegisterServiceBridgeServer(s grpc.ServiceRegistrar, srv ServiceBridgeServer) {
	s.RegisterService(&ServiceBridge_ServiceDesc, srv)
}

func _ServiceBridge_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBridgeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.ServiceBridge/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBridgeServer).Register(ctx, req.(*RegistryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBridge_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBridgeServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.ServiceBridge/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBridgeServer).Destroy(ctx, req.(*DestroyServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBridge_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBridgeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.ServiceBridge/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBridgeServer).Query(ctx, req.(*QueryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBridge_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBridgeServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.ServiceBridge/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBridgeServer).Connect(ctx, req.(*ConnectServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceBridge_Pipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceBridgeServer).Pipeline(&serviceBridgePipelineServer{stream})
}

type ServiceBridge_PipelineServer interface {
	Send(*PipelineServiceResponse) error
	Recv() (*PipelineServiceRequest, error)
	grpc.ServerStream
}

type serviceBridgePipelineServer struct {
	grpc.ServerStream
}

func (x *serviceBridgePipelineServer) Send(m *PipelineServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceBridgePipelineServer) Recv() (*PipelineServiceRequest, error) {
	m := new(PipelineServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceBridge_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceBridgeServer).HealthCheck(&serviceBridgeHealthCheckServer{stream})
}

type ServiceBridge_HealthCheckServer interface {
	Send(*HealthCheckServiceResponse) error
	Recv() (*HealthCheckServiceRequest, error)
	grpc.ServerStream
}

type serviceBridgeHealthCheckServer struct {
	grpc.ServerStream
}

func (x *serviceBridgeHealthCheckServer) Send(m *HealthCheckServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceBridgeHealthCheckServer) Recv() (*HealthCheckServiceRequest, error) {
	m := new(HealthCheckServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceBridge_ServiceDesc is the grpc.ServiceDesc for ServiceBridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceBridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.ServiceBridge",
	HandlerType: (*ServiceBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ServiceBridge_Register_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ServiceBridge_Destroy_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ServiceBridge_Query_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _ServiceBridge_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipeline",
			Handler:       _ServiceBridge_Pipeline_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HealthCheck",
			Handler:       _ServiceBridge_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
